{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["plotly","require","process","console","log","App","noResultsUrl","fetch","res","json","DataFeed","Rows","xData","map","row","d_pub_variant","yData","m_pub_impressions","coordinateData","x","y","type","layout","fileopt","filename","xaxis","title","yaxis","plot","err","msg","ok","Error","statusText","id","scrolling","src","height","width","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"yUACMA,EAASC,EAAQ,GAARA,CAAkBC,cAAuCA,wBAExEC,QAAQC,IAAI,gBAAiBF,mR,IA2DdG,E,kUAtDHC,E,4UAAoVJ,wCAC1VC,QAAQC,IAAI,kBAAmBE,G,SACbC,MAAMD,G,cAAlBE,E,gBACaA,EAAIC,O,UAAjBA,E,OACNN,QAAQC,IAAI,QAASK,G,cAEUA,EAAvBC,S,GAAYC,E,KAAAA,KAEdC,EAAQD,EAAKE,KAAI,SAACC,GAAD,OAASA,EAAIC,iBAC9BC,EAAQL,EAAKE,KAAI,SAACC,GAAD,OAASA,EAAIG,qBAE9BC,EAAiB,CAAC,CAACC,EAAGP,EAAOQ,EAAGJ,EAAOK,KAAM,QAC7CC,EAAS,CACbC,QAAS,YACTC,SAAU,sBACVF,OAAQ,CACNG,MAAO,CACLC,MAAO,WAGTC,MAAO,CACLD,MAAO,2BAKb1B,EAAO4B,KAAKV,EAAgBI,GAAQ,SAAUO,EAAKC,GACjD,GAAID,EAAK,OAAO1B,QAAQC,IAAIyB,GAC5B1B,QAAQC,IAAI0B,MAETtB,EAAIuB,G,uBACDC,MAAMxB,EAAIyB,Y,0DAGlB9B,QAAQC,IAAR,M,+IAKF,OACI,6BACE,4BACIsB,MAAM,aACNQ,GAAG,SACHC,UAAU,KACVC,IAAI,kDACJC,OAAO,MACPC,MAAM,c,GAnDFC,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtD,QAAQsD,MAAMA,EAAMC,c","file":"static/js/main.85b48115.chunk.js","sourcesContent":["import React, {Component} from 'react';\nconst plotly = require('plotly')(process.env.REACT_APP_PLOTLY_USERNAME, process.env.REACT_APP_PLOTLY_API_KEY)\n\nconsole.log(\"process.env==\", process.env)\nclass App extends Component {\n\n  async componentDidMount() {\n    try {\n      const noResultsUrl = `https://apirest.atinternet-solutions.com/data/v2/json/getData?&columns={d_pub_variant,m_pub_impressions}&sort={-m_pub_impressions}&filter={m_pub_impressions:{$gt:%270%27},d_pub_creative:{$eq:%27No%20results%27},d_pub_campaign:{$eq:%27se-searchbox-message%27}}&space={s:598273}&period={R:{M:%270%27}}&max-results=10&apikey=${process.env.REACT_APP_ATI_KEY}`\n      console.log(\"noResultsUrl===\", noResultsUrl)\n      const res = await fetch(noResultsUrl)\n      const json = await res.json();\n      console.log('json=', json)\n\n      const { DataFeed: [{Rows}] } = json;\n\n      const xData = Rows.map((row) => row.d_pub_variant)\n      const yData = Rows.map((row) => row.m_pub_impressions)\n\n      const coordinateData = [{x: xData, y: yData, type: 'bar'}];\n      const layout = {\n        fileopt: \"overwrite\",\n        filename: \"simple-node-example\",\n        layout: {\n          xaxis: {\n            title: \"Queries\",\n\n          },\n          yaxis: {\n            title: \"Publisher Impressions\"\n          }\n        }\n      };\n\n      plotly.plot(coordinateData, layout, function (err, msg) {\n        if (err) return console.log(err);\n        console.log(msg);\n      });\n      if (!res.ok) {\n        throw Error(res.statusText);\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  render() {\n    return (\n        <div>\n          <iframe\n              title=\"No results\"\n              id=\"igraph\"\n              scrolling=\"no\"\n              src=\"https://chart-studio.plotly.com/~mo_at_bbc/0/#/\"\n              height=\"525\"\n              width=\"100%\">\n          </iframe>\n        </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}